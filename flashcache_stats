#!/usr/bin/env ruby
# flashcache_stats - A munin plugin to monitor FlashCache device statistics.
#
# Author: PÃ¥l-Kristian Hamre <pkhamre@gmail.com> - http://blog.pkhamre.com/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#%# family=auto
#%# capabilities=autoconf

require 'find'

module Munin
  class FlashCacheStats
    def initialize
      flashcache_proc_path = '/proc/flashcache'

      @config = {
        :io => {
          :title  => 'Reads/${graph_period} (-) / Writes/${graph_period} (+)',
          :vlabel => 'per second',
          :values => {
            'reads' => {
              :graph => 'no',
              :info  => 'FlashCache reads',
              :label => 'Read bytes'
            },
            'writes' => {
              :negative => 'reads',
              :info     => 'FlashCache writes',
              :label    => 'Write bytes'
            }
          }
        },
        :hits => {
          :title  => 'FlashCache hits',
          :vlabel => 'flashcache_hits',
          :values => {
            'read_hits' => {
              :info  => 'FlashCache read hits',
              :label => 'read_hits'
            },
            'write_hits' => {
              :info  => 'FlashCache write hits',
              :label => 'write_hits'
            },
            'dirty_write_hits' => {
              :info  => 'FlashCache dirty write hits',
              :label => 'dirty_write_hits'
            }
          }
        },
        :hitspercent => {
          :title    => 'FlashCache hit in percent',
          :vlabel   => 'flashcache_hit_in_percent',
          :values   => {
            'read_hit_percent' => {
              :info  => 'FlashCache read hits in percent',
              :label => 'read_hit_percent'
            },
            'write_hit_percent' => {
              :info  => 'FlashCache write hits in percent',
              :label => 'write_hit_percent'
            },
            'dirty_write_hit_percent' => {
              :info  => 'FlashCache dirty write hits in percent',
              :label => 'dirty_write_hit_percent'
            }
          }
        }
      }

      if File.exists? flashcache_proc_path
        Find.find flashcache_proc_path do |path|
          @flashcache_stats_path = path if path.include? 'flashcache_stats'
        end
        @autoconf = 'yes'
      else
        @autoconf = 'no'
      end
    end

    def autoconf
      puts @autoconf
    end

    def config
      @config.each_pair do |graphname, data|
        puts "multigraph FlashCache#{graphname.to_s.capitalize}"
        if data.has_key? :title    then puts "graph_title #{data[:title]}" end
        if data.has_key? :vlabel   then puts "graph_vlabel #{data[:vlabel]}" end
        if data.has_key? :category then puts "graph_category #{data[:category]}" else puts "graph_category flashcache" end
        if data.has_key? :base     then puts "graph_args --base #{data[:base]}"  else puts "graph_args --base 1000 --lower-limit 0" end
        if data.has_key? :scale    then puts "graph_scale #{data[:scale]}"       else puts "graph_scale no" end
        puts

        data[:values].each_pair do |graph, val|
          if val.has_key? :draw     then puts "#{graph.to_s}.draw #{val[:draw]}" else puts "#{graph.to_s}.draw LINE1" end
          if val.has_key? :type     then puts "#{graph.to_s}.type #{val[:type]}" else puts "#{graph.to_s}.type DERIVE" end
          if val.has_key? :min      then puts "#{graph.to_s}.min #{val[:min]}"   else puts "#{graph.to_s}.min 0" end
          if val.has_key? :graph    then puts "#{graph.to_s}.graph #{val[:graph]}" end
          if val.has_key? :info     then puts "#{graph.to_s}.info #{val[:info]}" end
          if val.has_key? :label    then puts "#{graph.to_s}.label #{val[:label]}" end
          if val.has_key? :negative then puts "#{graph.to_s}.negative #{val[:negative]}" end
        end

        puts
      end
    end

    def run
      file = File.open @flashcache_stats_path
      content = file.read
      content.gsub!(/\n/, '')

      @config.each do |cgraphname, data|
        puts "multigraph flashcache_#{cgraphname}"

        data[:values].each do |graph, val|
          content.split.each do |item|
            name, value = item.split '='
            puts "#{graph}.value #{value}" if name == val[:label]
          end
        end
      end
    end
  end
end

flashcache_stats = Munin::FlashCacheStats.new

case ARGV[0]
when 'config'
  flashcache_stats.config
when 'autoconf'
  flashcache_stats.autoconf
else
  flashcache_stats.run
end
